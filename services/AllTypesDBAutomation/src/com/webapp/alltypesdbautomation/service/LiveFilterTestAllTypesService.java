/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.webapp.alltypesdbautomation.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webapp.alltypesdbautomation.LiveFilterTestAllTypes;

/**
 * Service object for domain model class {@link LiveFilterTestAllTypes}.
 */
public interface LiveFilterTestAllTypesService {

    /**
     * Creates a new LiveFilterTestAllTypes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LiveFilterTestAllTypes if any.
     *
     * @param liveFilterTestAllTypes Details of the LiveFilterTestAllTypes to be created; value cannot be null.
     * @return The newly created LiveFilterTestAllTypes.
     */
    LiveFilterTestAllTypes create(@Valid LiveFilterTestAllTypes liveFilterTestAllTypes);


	/**
     * Returns LiveFilterTestAllTypes by given id if exists.
     *
     * @param livefiltertestalltypesId The id of the LiveFilterTestAllTypes to get; value cannot be null.
     * @return LiveFilterTestAllTypes associated with the given livefiltertestalltypesId.
	 * @throws EntityNotFoundException If no LiveFilterTestAllTypes is found.
     */
    LiveFilterTestAllTypes getById(Integer livefiltertestalltypesId);

    /**
     * Find and return the LiveFilterTestAllTypes by given id if exists, returns null otherwise.
     *
     * @param livefiltertestalltypesId The id of the LiveFilterTestAllTypes to get; value cannot be null.
     * @return LiveFilterTestAllTypes associated with the given livefiltertestalltypesId.
     */
    LiveFilterTestAllTypes findById(Integer livefiltertestalltypesId);

	/**
     * Find and return the list of LiveFilterTestAllTypes by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param livefiltertestalltypesIds The id's of the LiveFilterTestAllTypes to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return LiveFilterTestAllTypes associated with the given livefiltertestalltypesIds.
     */
    List<LiveFilterTestAllTypes> findByMultipleIds(List<Integer> livefiltertestalltypesIds, boolean orderedReturn);


    /**
     * Updates the details of an existing LiveFilterTestAllTypes. It replaces all fields of the existing LiveFilterTestAllTypes with the given liveFilterTestAllTypes.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LiveFilterTestAllTypes if any.
     *
     * @param liveFilterTestAllTypes The details of the LiveFilterTestAllTypes to be updated; value cannot be null.
     * @return The updated LiveFilterTestAllTypes.
     * @throws EntityNotFoundException if no LiveFilterTestAllTypes is found with given input.
     */
    LiveFilterTestAllTypes update(@Valid LiveFilterTestAllTypes liveFilterTestAllTypes);


    /**
     * Partially updates the details of an existing LiveFilterTestAllTypes. It updates only the
     * fields of the existing LiveFilterTestAllTypes which are passed in the liveFilterTestAllTypesPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on LiveFilterTestAllTypes if any.
     *
     * @param livefiltertestalltypesId The id of the LiveFilterTestAllTypes to be deleted; value cannot be null.
     * @param liveFilterTestAllTypesPatch The partial data of LiveFilterTestAllTypes which is supposed to be updated; value cannot be null.
     * @return The updated LiveFilterTestAllTypes.
     * @throws EntityNotFoundException if no LiveFilterTestAllTypes is found with given input.
     */
    LiveFilterTestAllTypes partialUpdate(Integer livefiltertestalltypesId, Map<String, Object> liveFilterTestAllTypesPatch);

    /**
     * Deletes an existing LiveFilterTestAllTypes with the given id.
     *
     * @param livefiltertestalltypesId The id of the LiveFilterTestAllTypes to be deleted; value cannot be null.
     * @return The deleted LiveFilterTestAllTypes.
     * @throws EntityNotFoundException if no LiveFilterTestAllTypes found with the given id.
     */
    LiveFilterTestAllTypes delete(Integer livefiltertestalltypesId);

    /**
     * Deletes an existing LiveFilterTestAllTypes with the given object.
     *
     * @param liveFilterTestAllTypes The instance of the LiveFilterTestAllTypes to be deleted; value cannot be null.
     */
    void delete(LiveFilterTestAllTypes liveFilterTestAllTypes);

    /**
     * Find all LiveFilterTestAllTypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LiveFilterTestAllTypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<LiveFilterTestAllTypes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all LiveFilterTestAllTypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching LiveFilterTestAllTypes.
     *
     * @see Pageable
     * @see Page
     */
    Page<LiveFilterTestAllTypes> findAll(String query, Pageable pageable);

    /**
     * Exports all LiveFilterTestAllTypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all LiveFilterTestAllTypes matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the LiveFilterTestAllTypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the LiveFilterTestAllTypes.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}