/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.webapp.alltypesdbautomation.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.webapp.alltypesdbautomation.LiveFilterTestAllTypes;


/**
 * ServiceImpl object for domain model class LiveFilterTestAllTypes.
 *
 * @see LiveFilterTestAllTypes
 */
@Service("AllTypesDBAutomation.LiveFilterTestAllTypesService")
@Validated
public class LiveFilterTestAllTypesServiceImpl implements LiveFilterTestAllTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LiveFilterTestAllTypesServiceImpl.class);


    @Autowired
    @Qualifier("AllTypesDBAutomation.LiveFilterTestAllTypesDao")
    private WMGenericDao<LiveFilterTestAllTypes, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<LiveFilterTestAllTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "AllTypesDBAutomationTransactionManager")
    @Override
    public LiveFilterTestAllTypes create(LiveFilterTestAllTypes liveFilterTestAllTypes) {
        LOGGER.debug("Creating a new LiveFilterTestAllTypes with information: {}", liveFilterTestAllTypes);

        LiveFilterTestAllTypes liveFilterTestAllTypesCreated = this.wmGenericDao.create(liveFilterTestAllTypes);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(liveFilterTestAllTypesCreated);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public LiveFilterTestAllTypes getById(Integer livefiltertestalltypesId) {
        LOGGER.debug("Finding LiveFilterTestAllTypes by id: {}", livefiltertestalltypesId);
        return this.wmGenericDao.findById(livefiltertestalltypesId);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public LiveFilterTestAllTypes findById(Integer livefiltertestalltypesId) {
        LOGGER.debug("Finding LiveFilterTestAllTypes by id: {}", livefiltertestalltypesId);
        try {
            return this.wmGenericDao.findById(livefiltertestalltypesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No LiveFilterTestAllTypes found with id: {}", livefiltertestalltypesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public List<LiveFilterTestAllTypes> findByMultipleIds(List<Integer> livefiltertestalltypesIds, boolean orderedReturn) {
        LOGGER.debug("Finding LiveFilterTestAllTypes by ids: {}", livefiltertestalltypesIds);

        return this.wmGenericDao.findByMultipleIds(livefiltertestalltypesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public LiveFilterTestAllTypes update(LiveFilterTestAllTypes liveFilterTestAllTypes) {
        LOGGER.debug("Updating LiveFilterTestAllTypes with information: {}", liveFilterTestAllTypes);

        this.wmGenericDao.update(liveFilterTestAllTypes);
        this.wmGenericDao.refresh(liveFilterTestAllTypes);

        return liveFilterTestAllTypes;
    }

    @Transactional(value = "AllTypesDBAutomationTransactionManager")
    @Override
    public LiveFilterTestAllTypes partialUpdate(Integer livefiltertestalltypesId, Map<String, Object>liveFilterTestAllTypesPatch) {
        LOGGER.debug("Partially Updating the LiveFilterTestAllTypes with id: {}", livefiltertestalltypesId);

        LiveFilterTestAllTypes liveFilterTestAllTypes = getById(livefiltertestalltypesId);

        try {
            ObjectReader liveFilterTestAllTypesReader = this.objectMapper.reader().forType(LiveFilterTestAllTypes.class).withValueToUpdate(liveFilterTestAllTypes);
            liveFilterTestAllTypes = liveFilterTestAllTypesReader.readValue(this.objectMapper.writeValueAsString(liveFilterTestAllTypesPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", liveFilterTestAllTypesPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        liveFilterTestAllTypes = update(liveFilterTestAllTypes);

        return liveFilterTestAllTypes;
    }

    @Transactional(value = "AllTypesDBAutomationTransactionManager")
    @Override
    public LiveFilterTestAllTypes delete(Integer livefiltertestalltypesId) {
        LOGGER.debug("Deleting LiveFilterTestAllTypes with id: {}", livefiltertestalltypesId);
        LiveFilterTestAllTypes deleted = this.wmGenericDao.findById(livefiltertestalltypesId);
        if (deleted == null) {
            LOGGER.debug("No LiveFilterTestAllTypes found with id: {}", livefiltertestalltypesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), LiveFilterTestAllTypes.class.getSimpleName(), livefiltertestalltypesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "AllTypesDBAutomationTransactionManager")
    @Override
    public void delete(LiveFilterTestAllTypes liveFilterTestAllTypes) {
        LOGGER.debug("Deleting LiveFilterTestAllTypes with {}", liveFilterTestAllTypes);
        this.wmGenericDao.delete(liveFilterTestAllTypes);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public Page<LiveFilterTestAllTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LiveFilterTestAllTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public Page<LiveFilterTestAllTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LiveFilterTestAllTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service AllTypesDBAutomation for table LiveFilterTestAllTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service AllTypesDBAutomation for table LiveFilterTestAllTypes to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "AllTypesDBAutomationTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}