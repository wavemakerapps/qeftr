/*Copyright (c) 2019-2020 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.webapp.alltypesdbautomation.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.webapp.alltypesdbautomation.LiveFilterTestAllTypes;
import com.webapp.alltypesdbautomation.service.LiveFilterTestAllTypesService;


/**
 * Controller object for domain model class LiveFilterTestAllTypes.
 * @see LiveFilterTestAllTypes
 */
@RestController("AllTypesDBAutomation.LiveFilterTestAllTypesController")
@Api(value = "LiveFilterTestAllTypesController", description = "Exposes APIs to work with LiveFilterTestAllTypes resource.")
@RequestMapping("/AllTypesDBAutomation/LiveFilterTestAllTypes")
public class LiveFilterTestAllTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LiveFilterTestAllTypesController.class);

    @Autowired
	@Qualifier("AllTypesDBAutomation.LiveFilterTestAllTypesService")
	private LiveFilterTestAllTypesService liveFilterTestAllTypesService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new LiveFilterTestAllTypes instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LiveFilterTestAllTypes createLiveFilterTestAllTypes(@RequestPart("wm_data_json") LiveFilterTestAllTypes liveFilterTestAllTypes, @RequestPart(value = "blobColumn", required = false) MultipartFile _blobColumn) {
		LOGGER.debug("Create LiveFilterTestAllTypes with information: {}" , liveFilterTestAllTypes);

    liveFilterTestAllTypes.setBlobColumn(WMMultipartUtils.toByteArray(_blobColumn));
		liveFilterTestAllTypes = liveFilterTestAllTypesService.create(liveFilterTestAllTypes);
		LOGGER.debug("Created LiveFilterTestAllTypes with information: {}" , liveFilterTestAllTypes);

	    return liveFilterTestAllTypes;
	}

    @ApiOperation(value = "Returns the LiveFilterTestAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LiveFilterTestAllTypes getLiveFilterTestAllTypes(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting LiveFilterTestAllTypes with id: {}" , id);

        LiveFilterTestAllTypes foundLiveFilterTestAllTypes = liveFilterTestAllTypesService.getById(id);
        LOGGER.debug("LiveFilterTestAllTypes details with id: {}" , foundLiveFilterTestAllTypes);

        return foundLiveFilterTestAllTypes;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in LiveFilterTestAllTypes instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getLiveFilterTestAllTypesBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in LiveFilterTestAllTypes instance" , fieldName);

        if(!WMRuntimeUtils.isLob(LiveFilterTestAllTypes.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        LiveFilterTestAllTypes liveFilterTestAllTypes = liveFilterTestAllTypesService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(liveFilterTestAllTypes, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the LiveFilterTestAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LiveFilterTestAllTypes editLiveFilterTestAllTypes(@PathVariable("id") Integer id, @RequestBody LiveFilterTestAllTypes liveFilterTestAllTypes) {
        LOGGER.debug("Editing LiveFilterTestAllTypes with id: {}" , liveFilterTestAllTypes.getPkId());

        liveFilterTestAllTypes.setPkId(id);
        liveFilterTestAllTypes = liveFilterTestAllTypesService.update(liveFilterTestAllTypes);
        LOGGER.debug("LiveFilterTestAllTypes details with id: {}" , liveFilterTestAllTypes);

        return liveFilterTestAllTypes;
    }
    
    @ApiOperation(value = "Partially updates the LiveFilterTestAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PATCH)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LiveFilterTestAllTypes patchLiveFilterTestAllTypes(@PathVariable("id") Integer id, @RequestBody @MapTo(LiveFilterTestAllTypes.class) Map<String, Object> liveFilterTestAllTypesPatch) {
        LOGGER.debug("Partially updating LiveFilterTestAllTypes with id: {}" , id);

        LiveFilterTestAllTypes liveFilterTestAllTypes = liveFilterTestAllTypesService.partialUpdate(id, liveFilterTestAllTypesPatch);
        LOGGER.debug("LiveFilterTestAllTypes details after partial update: {}" , liveFilterTestAllTypes);

        return liveFilterTestAllTypes;
    }

    @ApiOperation(value = "Updates the LiveFilterTestAllTypes instance associated with the given id.This API should be used when LiveFilterTestAllTypes instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LiveFilterTestAllTypes editLiveFilterTestAllTypes(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) {
        LiveFilterTestAllTypes newLiveFilterTestAllTypes = WMMultipartUtils.toObject(multipartHttpServletRequest, LiveFilterTestAllTypes.class, "AllTypesDBAutomation");
        newLiveFilterTestAllTypes.setPkId(id);

        LiveFilterTestAllTypes oldLiveFilterTestAllTypes = liveFilterTestAllTypesService.getById(id);
        WMMultipartUtils.updateLobsContent(oldLiveFilterTestAllTypes, newLiveFilterTestAllTypes);
        LOGGER.debug("Updating LiveFilterTestAllTypes with information: {}" , newLiveFilterTestAllTypes);

        return liveFilterTestAllTypesService.update(newLiveFilterTestAllTypes);
    }

    @ApiOperation(value = "Deletes the LiveFilterTestAllTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLiveFilterTestAllTypes(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting LiveFilterTestAllTypes with id: {}" , id);

        LiveFilterTestAllTypes deletedLiveFilterTestAllTypes = liveFilterTestAllTypesService.delete(id);

        return deletedLiveFilterTestAllTypes != null;
    }

    /**
     * @deprecated Use {@link #findLiveFilterTestAllTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LiveFilterTestAllTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LiveFilterTestAllTypes> searchLiveFilterTestAllTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LiveFilterTestAllTypes list by query filter:{}", (Object) queryFilters);
        return liveFilterTestAllTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LiveFilterTestAllTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LiveFilterTestAllTypes> findLiveFilterTestAllTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LiveFilterTestAllTypes list by filter:", query);
        return liveFilterTestAllTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LiveFilterTestAllTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<LiveFilterTestAllTypes> filterLiveFilterTestAllTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LiveFilterTestAllTypes list by filter", query);
        return liveFilterTestAllTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportLiveFilterTestAllTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return liveFilterTestAllTypesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportLiveFilterTestAllTypesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = LiveFilterTestAllTypes.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> liveFilterTestAllTypesService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of LiveFilterTestAllTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countLiveFilterTestAllTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LiveFilterTestAllTypes");
		return liveFilterTestAllTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getLiveFilterTestAllTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return liveFilterTestAllTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LiveFilterTestAllTypesService instance
	 */
	protected void setLiveFilterTestAllTypesService(LiveFilterTestAllTypesService service) {
		this.liveFilterTestAllTypesService = service;
	}

}